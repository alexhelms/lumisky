using CommunityToolkit.Mvvm.ComponentModel;
using Newtonsoft.Json;
using OdinEye.Core.IO;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace OdinEye.Core.Profile;

public interface IProfileProvider
{
    /// <summary>
    /// Create a new profile and set it as the current profile.
    /// If the profile name already exists, no new profile is created and the existing profile is activated and returned.
    /// </summary>
    /// <param name="profileName">The name of the profile, must be unique.</param>
    /// <returns>The new profile.</returns>
    IProfile NewProfile(string profileName);

    /// <summary>
    /// Create a new profile and set it as the current profile.
    /// The name will be autogenerated.
    /// </summary>
    /// <returns>The new profile.</returns>
    IProfile NewProfile();

    /// <summary>
    /// Delete a profile.
    /// If the current profile is delete, another profile will be selected.
    /// </summary>
    /// <param name="profileName">The name of the profile to delete.</param>
    /// <returns>True if the profile was deleted.</returns>
    bool DeleteProfile(string profileName);

    /// <summary>
    /// Save the current profile.
    /// </summary>
    void SaveProfile();

    /// <summary>
    /// Load a profile by name and optionally set it as the current profile.
    /// If the profile is not found, <see cref="FileNotFoundException"/> is thrown.
    /// </summary>
    /// <param name="profileName">The profile name.</param>
    /// <param name="activate">When true, the loaded profile is set as the current profile.</param>
    /// <returns>The loaded profile.</returns>
    IProfile LoadProfile(string profileName, bool activate = true);

    /// <summary>
    /// Load all profiles.
    /// The most recently activated profile will be set as the active profile.
    /// </summary>
    /// <returns>The current profile.</returns>
    IProfile LoadProfiles();

    /// <summary>
    /// Geta list of profiles.
    /// </summary>
    ObservableCollection<IProfile> Profiles { get; }

    /// <summary>
    /// Get or set the current profile.
    /// </summary>
    IProfile Current { get; set; }
}

public class ProfileProvider : ObservableObject, IProfileProvider
{
    private static readonly string ProfileExtension = ".lgp";

    private IProfile _current = null!;
    private string? _prevProfileName;

    public ObservableCollection<IProfile> Profiles { get; } = new();

    public IProfile Current
    {
        get => _current ?? throw new NullReferenceException("Current profile is null.");
        set
        {
            if (!ReferenceEquals(_current, value))
            {
                ChangeProfile(_current, value);
            }
        }
    }

    public ProfileProvider()
    {
        LoadProfiles();
    }

    public IProfile NewProfile(string profileName)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(profileName);

        if (Profiles.FirstOrDefault(p => p.Name.Equals(profileName, StringComparison.InvariantCultureIgnoreCase)) is { } profile)
        {
            return profile;
        }

        profile = new Profile
        {
            Name = profileName,
        };

        Profiles.Add(profile);
        Current = profile;
        return profile;
    }

    public IProfile NewProfile()
    {
        var name = "New Profile";
        var count = Profiles.Count(p => p.Name.StartsWith(name, StringComparison.InvariantCultureIgnoreCase));
        name += (count + 1).ToString();
        return NewProfile(name);
    }

    public bool DeleteProfile(string profileName)
    {
        if (Profiles.FirstOrDefault(p => p.Name.Equals(profileName, StringComparison.InvariantCultureIgnoreCase)) is { } profile &&
            Profiles.Remove(profile))
        {
            if (Profiles.Count == 0) NewProfile();
            Current = Profiles.First();
            DeleteProfileFile(profile.Name);
            return true;
        }

        return false;
    }

    public void SaveProfile()
    {
        var profile = Current;
        ArgumentNullException.ThrowIfNull(profile, nameof(profile));

        var filename = GetProfileFilename(profile.Name);
        var backupFilename = filename + ".bak";

        try
        {
            Directory.CreateDirectory(OdinEyePaths.Profiles);
            if (File.Exists(filename))
                File.Copy(filename, backupFilename, overwrite: true);

            using var file = File.Open(filename, FileMode.Create, FileAccess.Write);
            using var memory = new MemoryStream();
            using var writer = new StreamWriter(file);

            var serializer = JsonSerializer.Create(Profile.CreateSerializerSettings());
            serializer.Serialize(writer, profile);

            writer.Flush();
            memory.Seek(0, SeekOrigin.Begin);
            memory.CopyTo(file);
            file.Flush();
        }
        catch (Exception e)
        {
            Log.Error(e, "Error saving profile {Filename}, restoring backup", filename);
            if (File.Exists(backupFilename))
                File.Move(backupFilename, filename, overwrite: true);
            throw;
        }
        finally
        {
            if (File.Exists(backupFilename))
                File.Delete(backupFilename);
        }
    }

    public IProfile LoadProfile(string profileName, bool activate = true)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(profileName);

        var filename = GetProfileFilename(profileName);
        if (!File.Exists(filename))
        {
            Log.Error("{ProfileName} profile not found at {Filename}", profileName, filename);
            throw new FileNotFoundException($"Profile ({profileName}) not found", filename);
        }

        try
        {
            using var file = File.Open(filename, FileMode.Open, FileAccess.Read);
            using var reader = new StreamReader(file);
            using var jsonReader = new JsonTextReader(reader);

            var serializer = JsonSerializer.Create(Profile.CreateSerializerSettings());
            IProfile profile = serializer.Deserialize<Profile>(jsonReader)
                ?? throw new NullReferenceException($"Deserializing profile {filename} returned null");

            Profiles.Add(profile);
            if (activate)
                Current = profile;
            return profile;
        }
        catch (Exception e)
        {
            Log.Error(e, "Error deserializing profile {ProfileName} at {Filename}", profileName, filename);
            throw;
        }
    }

    public IProfile LoadProfiles()
    {
        Directory.CreateDirectory(OdinEyePaths.Profiles);
        var files = Directory.GetFiles(OdinEyePaths.Profiles, $"*{ProfileExtension}");
        if (files.Length > 0)
        {
            foreach (var file in files)
            {
                var profileName = Path.GetFileNameWithoutExtension(file);
                LoadProfile(profileName, activate: false);
            }

            // In case the profiles were invalid
            if (Profiles.Count == 0)
            {
                NewProfile("default");
                SaveProfile();
            }

            Current = Profiles.OrderByDescending(p => p.LastActivatedUtc).First();
        }
        else
        {
            NewProfile("default");
            SaveProfile();
        }

        return Current;
    }

    private string GetProfileFilename(string profileName) => Path.Combine(OdinEyePaths.Profiles, $"{profileName}{ProfileExtension}");

    private void ChangeProfile(IProfile? oldProfile, IProfile newProfile)
    {
        if (oldProfile is not null)
        {
            SaveProfile();
        }

        UnhookEvents(oldProfile);
        _current = newProfile;
        HookEvents(newProfile);
        Current.LastActivatedUtc = DateTime.UtcNow;
        OnPropertyChanged(nameof(Current));
    }

    private void HookEvents(IProfile? profile)
    {
        if (profile is not null)
        {
            profile.PropertyChanging += ProfileOnPropertyChanging;
            profile.PropertyChanged += ProfileOnPropertyChanged;
        }
    }

    private void UnhookEvents(IProfile? profile)
    {
        if (profile is not null)
        {
            profile.PropertyChanging -= ProfileOnPropertyChanging;
            profile.PropertyChanged -= ProfileOnPropertyChanged;
        }
    }

    private void ProfileOnPropertyChanging(object? sender, PropertyChangingEventArgs e)
    {
        if (sender is IProfile profile && e.PropertyName == nameof(IProfile.Name))
        {
            _prevProfileName = profile.Name;
        }
    }

    private void ProfileOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        SaveProfile();

        // Detect a profile name change.
        // The profile will be saved to a new file (derived from IProfile.Name).
        // Delete the old profile file with the old name.
        if (sender is IProfile profile && e.PropertyName == nameof(IProfile.Name))
        {
            if (_prevProfileName is not null && !Current.Name.Equals(_prevProfileName))
            {
                DeleteProfileFile(_prevProfileName);
            }
        }
    }

    private void DeleteProfileFile(string profileName)
    {
        var filename = GetProfileFilename(profileName);
        if (File.Exists(filename))
        {
            try
            {
                File.Delete(filename);
            }
            catch (Exception e)
            {
                Log.Warning(e, "Unable to delete profile {Filename}", filename);
            }
        }
    }
}
