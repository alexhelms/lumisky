@using OdinEye.Core.Services
@page "/debug"
@implements IDisposable
@inject ExposureService ExposureService
<PageTitle>Debug</PageTitle>

<RadzenCard Style="width: 100%;">
    <RadzenText TextStyle="TextStyle.H6"><strong>Auto Exposure Prediction</strong></RadzenText>
    <RadzenChart>
        <RadzenLineSeries TItem="ChartItem" Data="@exposurePredictions" CategoryProperty="X" ValueProperty="Y" Title="e-/sec"
                          Stroke="#fa3b3b" StrokeWidth="3">
            <RadzenMarkers MarkerType="MarkerType.Circle" Size="6" />
        </RadzenLineSeries>
        <RadzenLineSeries TItem="ChartItem" Data="@exposurePredictionsCurveFit" CategoryProperty="X" ValueProperty="Y" Title="Prediction"
                          Stroke="#fbfb50">
        </RadzenLineSeries>
        <RadzenValueAxis FormatString="{0:0.000000}">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="e-/sec" />
        </RadzenValueAxis>
        <RadzenCategoryAxis>
            <RadzenGridLines Visible="true" />
        </RadzenCategoryAxis>
    </RadzenChart>
</RadzenCard>

@code {
    List<ChartItem> exposurePredictions = [];
    List<ChartItem> exposurePredictionsCurveFit = [];

    protected override void OnInitialized()
    {
        PopulateChartData();
        ExposureService.DataChanged += OnDataChanged;
    }

    public void Dispose()
    {
        ExposureService.DataChanged -= OnDataChanged;
    }

    private void OnDataChanged(object? sender, EventArgs e)
    {
        InvokeAsync(PopulateChartData);
    }

    private void PopulateChartData()
    {
        exposurePredictions.Clear();
        exposurePredictionsCurveFit.Clear();

        // Populate the data
        var data = ExposureService.PredictionData;
        for (int i = 0; i < data.Count; i++)
        {
            exposurePredictions.Add(new ChartItem(i, data[i]));
        }

        // Evaluate the curve fit
        if (ExposureService.PredictionCoefficients.Length > 0)
        {
            int factor = 10;
            int n = (data.Count * factor) + (1 * factor);  // project one exposure into the future
            for (int i = 0; i < n; i++)
            {
                double x = (double)i / factor;
                double y = MathNet.Numerics.Polynomial.Evaluate(x, ExposureService.PredictionCoefficients);
                exposurePredictionsCurveFit.Add(new ChartItem(x, y));
            }
        }

        StateHasChanged();
    }

    private record ChartItem(double X, double Y);
}
