@page "/generate"
@using Humanizer
@using Microsoft.EntityFrameworkCore
@using OdinEye.Core.DomainEvents
@using OdinEye.Core.Jobs
@using OdinEye.Core.Services
@using System.ComponentModel.DataAnnotations
@using Quartz
@implements IDisposable
@inject IJSRuntime JS
@inject AppDbContext DbContext
@inject GenerationService GenerationService
@inject SunService SunService

<PageTitle>Generate</PageTitle>

<HeadContent>
    <style>
        .rz-message-popup {
            z-index: 99;
        }
    </style>
</HeadContent>

<RadzenStack>
    <RadzenRow JustifyContent="JustifyContent.Center">
        <RadzenColumn Size="8" SizeLG="6">
            <RadzenTemplateForm Data="@model" Submit="@((GenerateForm args) => OnSubmit(args))">
                <RadzenStack Gap="1rem">
                    <RadzenFieldset Text="Generate">
                        <RadzenStack Gap="2rem">

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Type" Component="GenerateKind" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value=model.Kind Data="@(Enum.GetValues<GenerationKind>())" Style="width: 100%;" Name="GenerateKind" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center" RowGap="1.5rem">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Start" Component="StartDate" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenDatePicker @bind-Value=model.StartDate TValue="DateOnly" Style="display: block; width: 100%;" Name="StartDate" />
                                    <RadzenCustomValidator Component="StartDate" Validator="@(() => ValidateStartDateBeforeEndDate(model.StartDate))" Text="Start date must be before end date." Popup="false" Style="position: absolute;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenDatePicker @bind-Value=model.StartTime ShowTime="true" ShowSeconds="true" TimeOnly="true" DateFormat="HH:mm:ss" Style="display: block; width: 100%;" Name="StartTime" />
                                    <RadzenCustomValidator Component="StartTime" Validator="@(() => ValidateStartTimeBeforeEndTime(model.StartTime))" Text="Start time must be before end time." Popup="false" Style="position: absolute;" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center" RowGap="1.5rem">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="End" Component="StartDate" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenDatePicker @bind-Value=model.EndDate TValue="DateOnly" Style="display: block; width: 100%;" Name="EndDate" />
                                    <RadzenCustomValidator Component="EndDate" Validator="@(() => ValidateEndDateAfterStartDate(model.EndDate))" Text="End date must be after start date." Popup="false" Style="position: absolute;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenDatePicker @bind-Value=model.EndTime ShowTime="true" ShowSeconds="true" TimeOnly="true" DateFormat="HH:mm:ss" Style="display: block; width: 100%;" Name="EndTime" />
                                    <RadzenCustomValidator Component="EndTime" Validator="@(() => ValidateEndTimeAfterStartTime(model.EndTime))" Text="End time must be after start time." Popup="false" Style="position: absolute;" />
                                </RadzenColumn>
                            </RadzenRow>

                        </RadzenStack>
                    </RadzenFieldset>
                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Generate" />
                </RadzenStack>
            </RadzenTemplateForm>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow JustifyContent="JustifyContent.Center" class="rz-mt-4">
        <RadzenColumn Size="12">
            <RadzenDataGrid @ref="dataGrid" IsLoading="@isLoading" Count="@count" Data="@jobs" LoadData="@LoadData" AllowFiltering="false" 
                            AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="false"
                            PageSize="25" AllowPaging="true" ShowPagingSummary="true" SelectionMode="DataGridSelectionMode.Single">
                <EmptyTemplate>
                    <RadzenText TextAlign="TextAlign.Center" class="rz-mb-0">No jobs.</RadzenText>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.Kind)" Title="Type" TextAlign="TextAlign.Center" Width="180px" />
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.Created)" Title="Created" FormatString="{0:yyyy-MM-dd HH:mm:ss}" TextAlign="TextAlign.Center" Width="180px" />
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.Started)" Title="Started" TextAlign="TextAlign.Center" Width="180px">
                        <Template Context="item">
                            @if (item.Started.HasValue)
                            {
                                @item.Started.Value.ToString("yyyy-MM-dd HH:mm:ss")
                            }
                            else
                            {
                                <div>--</div>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.Finished)" Title="Finished" TextAlign="TextAlign.Center" Width="180px">
                        <Template Context="item">
                            @if (item.Finished.HasValue)
                            {
                                @item.Finished.Value.ToString("yyyy-MM-dd HH:mm:ss")
                            }
                            else
                            {
                                <div>--</div>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.Elapsed)" Title="Elapsed" TextAlign="TextAlign.Center" Width="180px">
                        <Template Context="item">
                            @if (item.Elapsed.HasValue)
                            {
                                @item.Elapsed.Value.Humanize(precision: 2, minUnit: Humanizer.Localisation.TimeUnit.Second)
                            }
                            else
                            {
                                <div>--</div>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.Begin)" Title="Start" FormatString="{0:yyyy-MM-dd HH:mm:ss}" TextAlign="TextAlign.Center" Width="180px" />
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.End)" Title="End" FormatString="{0:yyyy-MM-dd HH:mm:ss}" TextAlign="TextAlign.Center" Width="180px" />
                    <RadzenDataGridColumn Property="@nameof(GenerationJob.Duration)" Title="Duration" TextAlign="TextAlign.Center" Width="180px">
                        <Template Context="item">
                            @item.Duration.Humanize(precision: 2, minUnit: Humanizer.Localisation.TimeUnit.Second)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="State" TextAlign="TextAlign.Center" Width="200px" MinWidth="100px">
                        <Template Context="item">
                            @if (item.State == GenerationState.Running)
                            {
                                <RadzenProgressBar Value="@item.Progress" Max="100" ShowValue="true" Mode="@(item.Progress == 0 ? ProgressBarMode.Indeterminate : ProgressBarMode.Determinate)" />
                            }
                            else
                            {
                                <div>@StateToString(item.State)</div>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Actions" TextAlign="TextAlign.Center" Width="100px" MinWidth="100px">
                        <Template Context="item">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                                @if (item.State == GenerationState.Queued || item.State == GenerationState.Running)
                                {
                                    <RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(() => OnCancelJob(item))" @onclick:stopPropagation="true" />
                                }
                                else if (item.State == GenerationState.Success)
                                {
                                    <RadzenButton Icon="download" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(() => OnDownloadOutput(item))" @onclick:stopPropagation="true" />
                                }
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>

</RadzenStack>

@code
{
    private RadzenDataGrid<GenerationJob> dataGrid = null!;
    private GenerateForm model = new();

    private bool isLoading;
    private int count;
    private List<GenerationJob> jobs = [];

    protected override void OnInitialized()
    {
        model.StartDate = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));
        model.EndDate = model.StartDate.AddDays(1);
        model.StartTime = GetDusk(model.StartDate);
        model.EndTime = GetDawn(model.EndDate);

        GenerationService.Queued += OnGenerationQueued;
        GenerationService.Starting += OnGenerationStarting;
        GenerationService.Progress += OnGenerationProgress;
        GenerationService.Complete += OnGenerationComplete;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await dataGrid.RefreshDataAsync();
        }
    }

    public void Dispose()
    {
        GenerationService.Queued -= OnGenerationQueued;
        GenerationService.Starting -= OnGenerationStarting;
        GenerationService.Progress -= OnGenerationProgress;
        GenerationService.Complete -= OnGenerationComplete;
    }

    private async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var query = DbContext.Generations
            .AsNoTracking()
            .OrderByDescending(x => x.CreatedOn)
            .AsQueryable();

        count = query.Count();

        jobs = query
            .Skip(args.Skip.GetValueOrDefault())
            .Take(args.Top.GetValueOrDefault())
            .Select(x => new GenerationJob
            {
                Id = x.Id,
                Kind = x.Kind,
                State = x.State,
                Created = x.CreatedOn,
                Started = x.StartedOn,
                Finished = x.CompletedOn,
                Progress = x.Progress,
                Begin = DateTimeOffset.FromUnixTimeSeconds(x.RangeBegin).ToLocalTime().DateTime,
                End = DateTimeOffset.FromUnixTimeSeconds(x.RangeEnd).ToLocalTime().DateTime,
            })
            .ToList();

        isLoading = false;
    }

    private void OnGenerationQueued(object? sender, GenerationQueued message)
    {
        InvokeAsync(async () =>
        {
            if (dataGrid is not null)
                await dataGrid.RefreshDataAsync();
        });
    }

    private void OnGenerationStarting(object? sender, GenerationStarting message)
    {
        InvokeAsync(() =>
        {
            if (DbContext.Generations.AsNoTracking().FirstOrDefault(x => x.Id == message.Id) is { } generation)
            {
                if (jobs.FirstOrDefault(j => j.Id == message.Id) is { } job)
                {
                    job.State = generation.State;
                    job.Started = generation.StartedOn.GetValueOrDefault();
                    StateHasChanged();
                }
            }
        });
    }

    private void OnGenerationProgress(object? sender, GenerationProgress message)
    {
        InvokeAsync(() =>
        {
            if (DbContext.Generations.AsNoTracking().FirstOrDefault(x => x.Id == message.Id) is { } generation)
            {
                if (jobs.FirstOrDefault(j => j.Id == message.Id) is { } job)
                {
                    job.Progress = generation.Progress;
                    StateHasChanged();
                }
            }
        });
    }

    private void OnGenerationComplete(object? sender, GenerationComplete message)
    {
        InvokeAsync(() =>
        {
            if (DbContext.Generations.AsNoTracking().FirstOrDefault(x => x.Id == message.Id) is { } generation)
            {
                if (jobs.FirstOrDefault(j => j.Id == message.Id) is { } job)
                {
                    job.State = generation.State;
                    job.Finished = generation.CompletedOn;
                    StateHasChanged();
                }
            }
        });
    }

    private async Task OnCancelJob(GenerationJob item)
    {
        await GenerationService.CancelGeneration(item.Id);

        await InvokeAsync(() =>
        {
            if (DbContext.Generations.AsNoTracking().FirstOrDefault(x => x.Id == item.Id) is { } generation)
            {
                if (jobs.FirstOrDefault(j => j.Id == item.Id) is { } job)
                {
                    job.State = generation.State;
                    job.Finished = generation.CompletedOn;
                    StateHasChanged();
                }
            }
        });
    }

    private async Task OnDownloadOutput(GenerationJob item)
    {
        if (DbContext.Generations.AsNoTracking().FirstOrDefault(x => x.Id == item.Id) is { } generation)
        {
            if (generation.Kind == GenerationKind.Timelapse)
            {
                var id = generation.TimelapseId.GetValueOrDefault();
                await JS.InvokeVoidAsync("open", $"/api/video/download/timelapse?id={id}", "_blank");
            }
            else if (generation.Kind == GenerationKind.PanoramaTimelapse)
            {
                var id = generation.PanoramaTimelapseId.GetValueOrDefault();
                await JS.InvokeVoidAsync("open", $"/api/video/download/panorama?id={id}", "_blank");
            }
        }
    }

    private async Task OnSubmit(GenerateForm data)
    {
        if (data.Kind == GenerationKind.Timelapse)
        {
            await GenerationService.GenerateTimelapse(
                model.StartDateTime.ToUniversalTime(),  
                model.EndDateTime.ToUniversalTime());
        }
        else if (data.Kind == GenerationKind.PanoramaTimelapse)
        {
            await GenerationService.GeneratePanoramaTimelapse(
                model.StartDateTime.ToUniversalTime(),
                model.EndDateTime.ToUniversalTime());
        }

        await dataGrid.RefreshDataAsync();
    }

    private bool ValidateStartDateBeforeEndDate(DateOnly date)
    {
        return date <= model.EndDate;
    }

    private bool ValidateStartTimeBeforeEndTime(TimeOnly time)
    {
        var start = new DateTime(model.StartDate, time);
        var end = new DateTime(model.EndDate, model.EndTime);
        return start < end;
    }

    private bool ValidateEndDateAfterStartDate(DateOnly date)
    {
        return date >= model.StartDate;
    }

    private bool ValidateEndTimeAfterStartTime(TimeOnly time)
    {
        var start = new DateTime(model.StartDate, model.StartTime);
        var end = new DateTime(model.EndDate, time);
        return end > start;
    }

    private TimeOnly GetDawn(DateOnly date) => TimeOnly.FromDateTime(SunService.GetSunTimes(date).Dawn.GetValueOrDefault().ToLocalTime());

    private TimeOnly GetDusk(DateOnly date) => TimeOnly.FromDateTime(SunService.GetSunTimes(date).Dusk.GetValueOrDefault().ToLocalTime());

    private string StateToString(GenerationState state) => state switch
    {
        GenerationState.Queued => "Queued",
        GenerationState.Running => "Running",
        GenerationState.Success => "Complete",
        GenerationState.Failed => "Failed",
        GenerationState.Canceled => "Canceled",
        _ => "Unknown",
    };

    public class GenerateForm
    {
        public GenerationKind Kind { get; set; }
        public DateOnly StartDate { get; set; }
        public DateOnly EndDate { get; set; }
        public TimeOnly StartTime{ get; set; }
        public TimeOnly EndTime { get; set; }

        public DateTime StartDateTime => new DateTime(StartDate, StartTime, DateTimeKind.Local);
        public DateTime EndDateTime => new DateTime(EndDate, EndTime, DateTimeKind.Local);
    }

    public class GenerationJob
    {
        public int Id { get; set; }
        public DateTime Created { get; set; }
        public DateTime? Started { get; set; }
        public DateTime? Finished { get; set; }
        public TimeSpan? Elapsed => Started.HasValue && Finished.HasValue ? Finished.Value - Started.Value : null;
        public GenerationKind Kind { get; set; }
        public DateTime Begin { get; set; }
        public DateTime End { get; set; }
        public TimeSpan Duration => End - Begin;
        public int Progress { get; set; }
        public GenerationState State { get; set; } = GenerationState.Running;
    }
}
