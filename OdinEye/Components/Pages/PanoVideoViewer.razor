@implements IAsyncDisposable
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject AppDbContext DbContext
@page "/video/panorama/{Id:int}"
@using Microsoft.EntityFrameworkCore
@using OdinEye.Core.Video

<PageTitle>Panorama Timelapse</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="@Assets["lib/photo-sphere-viewer/core/index.css"]" />
    <link rel="stylesheet" href="@Assets["lib/photo-sphere-viewer/video-plugin/index.css"]" />
    <style>
        #video-viewer {
            display: block;
            width: calc(100vw - 116px);
            height: calc(100vh - 200px);
        }
    </style>
</HeadContent>

<div id="video-viewer" />

@code {
    private IJSObjectReference? module;
    private string? videoUrl;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var panorama = await DbContext.PanoramaTimelapses
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id == Id);

        if (panorama is null)
        {
            NavigationManager.NavigateTo("/404");
            return;
        }

        if (!File.Exists(panorama.Filename))
        {
            NavigationManager.NavigateTo("/404");
            return;
        }

        videoUrl = $"/api/video/download/panorama?id={Id}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/PanoVideoViewer.razor.js");

            if (module is not null &&
                videoUrl is not null)
            {
                await module.InvokeVoidAsync("createPanoVideoViewer", videoUrl);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (module is not null)
            {
                await module.InvokeVoidAsync("destroyPanoVideoViewer");
                await module.DisposeAsync();
            }
        }
        catch (JSDisconnectedException) { }
    }
}
