@using Humanizer
@using LumiSky.Core.Imaging
@using LumiSky.Core.Imaging.Processing
@using LumiSky.Core.Profile
@using System.ComponentModel.DataAnnotations
@using System.Text
@using LumiSky.Core.Services
@inject IProfileProvider Profile
@inject Radzen.NotificationService NotificationService
@inject IEnumerable<IMountPositionProvider> PositionProviders

<RadzenTemplateForm TItem="ProcessingSettingsModel" Data="@model" Submit="OnSubmit">
    <RadzenStack>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>White Balance</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn SizeMD="3">
                            <RadzenFormField Text="Red" Variant="Variant.Outlined" AllowFloatingLabel="false" Style="width: 100%;">
                                <RadzenNumeric @bind-Value="model.WbRedScale" Min="0" Max="1" Step="0.01" Format="0.00" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn SizeMD="9">
                            <RadzenSlider Min="0" Max="1" Step="0.01" @bind-Value=model.WbRedScale Style="width: 100%;" class="rz-mt-4" />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn SizeMD="3">
                            <RadzenFormField Text="Green" Variant="Variant.Outlined" AllowFloatingLabel="false" Style="width: 100%;">
                                <RadzenNumeric @bind-Value="model.WbGreenScale" Min="0" Max="1" Step="0.01" Format="0.00" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn SizeMD="9">
                            <RadzenSlider Min="0" Max="1" Step="0.01" @bind-Value=model.WbGreenScale Style="width: 100%;" class="rz-mt-4" />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn SizeMD="3">
                            <RadzenFormField Text="Blue" Variant="Variant.Outlined" AllowFloatingLabel="false" Style="width: 100%;">
                                <RadzenNumeric @bind-Value="model.WbBlueScale" Min="0" Max="1" Step="0.01" Format="0.00" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn SizeMD="9">
                            <RadzenSlider Min="0" Max="1" Step="0.01" @bind-Value=model.WbBlueScale Style="width: 100%;" class="rz-mt-4" />
                        </RadzenColumn>
                    </RadzenRow>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Hot Pixel Correction</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch @bind-Value="model.HotPixelCorrection" />
                        <RadzenLabel Text="Hot Pixel Correction" Component="True" />
                    </RadzenStack>

                    <RadzenFormField Text="Threshold Percent" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.HotPixelThresholdPercent" Min="5" Max="1000" Step="5" Format="F0" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                A hot pixel is corrected if its value is greater than [1 + threshold/100] times the max of its NSEW neighbors.
                                When corrected, the pixel is replaced with the average of its four neighbors. The neighbors are always of
                                the same color filter, respecting the CFA.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Auto S Curve</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent> 
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch @bind-Value="model.AutoSCurve" />
                        <RadzenLabel Text="Auto S Curve" Component="True" />
                    </RadzenStack>

                    <RadzenFormField Text="Contrast" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.AutoSCurveContrast" Min="1" Max="5" Step="0.1" Format="F2" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">1.0 is no contrast enhancement, default is 2.2.</RadzenText>
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Circle Mask</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenFormField Text="Diameter" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.CircleMaskDiameter" Min="0" Max="10000" Step="10" />
                    </RadzenFormField>

                    <RadzenFormField Text="X Offset" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.CircleMaskOffsetX" Min="-10000" Max="10000" Step="10" />
                    </RadzenFormField>

                    <RadzenFormField Text="Y Offset" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.CircleMaskOffsetY" Min="-10000" Max="10000" Step="10" />
                    </RadzenFormField>

                    <RadzenFormField Text="Blur Size" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.CircleMaskBlur" Min="0" Max="51" Step="2" />
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Overlay</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch @bind-Value="model.DrawCardinalOverlay" />
                        <RadzenLabel Text="Draw Cardinal Directions" Component="True" />
                    </RadzenStack>

                    <RadzenFormField Text="Text Size" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.TextSize" Min="10" Max="200" Step="5" />
                    </RadzenFormField>

                    <RadzenFormField Text="Outline Thickness" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.TextOutline" Min="0" Max="50" Step="1" />
                    </RadzenFormField>


                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="5rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0.5rem">
                            <RadzenLabel Text="Text Color" Component="TextColor" />
                            <RadzenColorPicker Name="TextColor" @bind-Value="selectedTextColor" ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0.5rem">
                            <RadzenLabel Text="Outline Color" Component="OutlineColor" />
                            <RadzenColorPicker Name="OutlineColor" @bind-Value="selectedTextOutlineColor" ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
                        </RadzenStack>
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                        <RadzenText Text="Image" TextStyle="TextStyle.Body1" class="rz-mb-0" />
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="5rem" Wrap="FlexWrap.Wrap">
                            <RadzenFormField Text="Top Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.CardinalTopString" Data=@cardinalDirections />
                            </RadzenFormField>
                            <RadzenFormField Text="Bottom Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.CardinalBottomString" Data=@cardinalDirections />
                            </RadzenFormField>
                            <RadzenFormField Text="Right Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.CardinalRightString" Data=@cardinalDirections />
                            </RadzenFormField>
                            <RadzenFormField Text="Left Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.CardinalLeftString" Data=@cardinalDirections />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                        <RadzenText Text="Panorama" TextStyle="TextStyle.Body1" class="rz-mb-0" />
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="5rem" Wrap="FlexWrap.Wrap">
                            <RadzenFormField Text="0° Azimuth Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.PanoramaCardinal0AzimuthString" Data=@cardinalDirections />
                            </RadzenFormField>
                            <RadzenFormField Text="90° Azimuth Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.PanoramaCardinal90AzimuthString" Data=@cardinalDirections />
                            </RadzenFormField>
                            <RadzenFormField Text="180° Azimuth Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.PanoramaCardinal180AzimuthString" Data=@cardinalDirections />
                            </RadzenFormField>
                            <RadzenFormField Text="270° Azimuth Label" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <RadzenDropDown @bind-Value="model.PanoramaCardinal270AzimuthString" Data=@cardinalDirections />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenStack>

                    <RadzenCard class="rz-p-4" Variant="Variant.Outlined">
                        <RadzenStack Orientation="Orientation.Vertical">

                            <RadzenText><strong>Variable Overlays</strong></RadzenText>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                <RadzenSwitch Name="EnableTextOverlays" @bind-Value="model.EnableTextOverlays" />
                                <RadzenLabel Text="Enable Variable Overlays" Component="EnableTextOverlays" />
                            </RadzenStack>

                            <RadzenDataGrid @ref=_textOverlayDataGrid TItem="TextOverlayModel" Data="@textOverlays" AllowFiltering="false" AllowPaging="false" AllowSorting="false" AllowColumnResize="true"
                            AllowAlternatingRows="false" EditMode="DataGridEditMode.Single" RowUpdate="OnUpdateTextOverlayRow" RowCreate="OnCreateTextOverlayRow">
                                <HeaderTemplate>
                                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Text="Add New Text Overlay" Click="InsertTextOverlayRow" Disabled="@(textOverlaysToInsert.Count > 0)" />
                                </HeaderTemplate>
                                <EmptyTemplate>
                                    <RadzenText TextAlign="TextAlign.Center">No overlays.</RadzenText>
                                </EmptyTemplate>
                                <Columns>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.Variable)" Title="Variable" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenDropDown @bind-Value=item.Variable Data="@(Enum.GetValues<OverlayVariable>())" Change="@(() => OnTextOverlayVariableChanged(item))" Style="width: 90%;" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.TextFormat)" TextAlign="TextAlign.Center">
                                        <HeaderTemplate>
                                            <RadzenLink Path="https://learn.microsoft.com/en-us/dotnet/standard/base-types/formatting-types" Text="Text Format" Target="_blank" />
                                        </HeaderTemplate>
                                        <EditTemplate Context="item">
                                            <RadzenTextBox @bind-Value=item.TextFormat Style="width: 90%;" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.X)" Title="X (from Left)" Width="128px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.X TValue="int" Min="-10000" Max="10000" Step="1" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.Y)" Title="Y (from Top)" Width="128px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.Y TValue="int" Min="-10000" Max="10000" Step="1" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.FontSize)" Title="Font Size" Width="72px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.FontSize TValue="int" Min="8" Max="1000" Step="1" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.TextAnchor)" Title="Text Anchor" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenDropDown @bind-Value=item.TextAnchor Data="@(Enum.GetValues<TextAnchor>())" Style="width: 90%;" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.TextColor)" Title="Text Color" Width="128px" TextAlign="TextAlign.Center">
                                        <Template Context="item">
                                            <svg width="32" height="32">
                                                <circle cx="16" cy="16" r="12" fill="@item.TextColor"/>
                                            </svg>
                                        </Template>
                                        <EditTemplate Context="item">
                                            <RadzenColorPicker @bind-Value=item.TextColor ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.StrokeColor)" Title="Stroke Color" Width="128px" TextAlign="TextAlign.Center">
                                        <Template Context="item">
                                            <svg width="32" height="32">
                                                <circle cx="16" cy="16" r="12" fill="@item.StrokeColor" />
                                            </svg>
                                        </Template>
                                        <EditTemplate Context="item">
                                            <RadzenColorPicker @bind-Value=item.StrokeColor ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(TextOverlayModel.StrokeWidth)" Title="Stroke Width" Width="128px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.StrokeWidth TValue="int" Min="0" Max="100" Step="1" Style="width: 100px;" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Frozen="true" FrozenPosition="FrozenColumnPosition.Right" TextAlign="TextAlign.Right">
                                        <Template Context="item">
                                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditTextOverlayRow(item))" @onclick:stopPropagation="true" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteTextOverlayRow(item))" @onclick:stopPropagation="true" />
                                        </Template>
                                        <EditTemplate Context="item">
                                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveTextOverlayRow(item))" aria-label="Save" />
                                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditTextOverlay(item))" aria-label="Cancel" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteTextOverlayRow(item))" aria-label="Delete" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                </Columns>
                            </RadzenDataGrid>
                        </RadzenStack>
                    </RadzenCard>

                    <RadzenCard class="rz-p-4" Variant="Variant.Outlined">
                        <RadzenStack Orientation="Orientation.Vertical">

                            <RadzenText><strong>Telescope Pointing</strong></RadzenText>

                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                Overlay the pointing position of one or more telescopes.
                            </RadzenText>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                <RadzenSwitch Name="EnablePointingOverlays" @bind-Value="model.EnablePointingOverlays" />
                                <RadzenLabel Text="Enable Pointing Overlays" Component="EnablePointingOverlays" />
                            </RadzenStack>

                            @* There is only one position provider for now so this is mostly there to show the user they *could* change it but it isnt supported. *@
                            <RadzenFormField Text="Position Provider" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <ChildContent>
                                    <RadzenDropDown TValue="string" Data=@positionProviderNames @bind-Value=selectedPositionProvider />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                        The method to get mount position.
                                    </RadzenText>
                                </Helper>
                            </RadzenFormField>

                            <RadzenFormField Text="Prometheus URL" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <ChildContent>
                                    <RadzenTextBox @bind-Value="model.PrometheusMountPositionUrl" />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                        The base URL to prometheus, for example: <span>https://prometheus.mynetwork.local/</span>
                                    </RadzenText>
                                </Helper>
                            </RadzenFormField>

                            <RadzenFormField Text="Altitude Threshold [deg]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <ChildContent>
                                    <RadzenNumeric @bind-Value="model.PointingOverlayAltitudeThreshold" Min="0" Max="90" Step="5" />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                        The pointing overlay will not be rendered when the mount is pointing below this altitude.
                                    </RadzenText>
                                </Helper>
                            </RadzenFormField>

                            <RadzenFormField Text="Radius [px]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <ChildContent>
                                    <RadzenNumeric @bind-Value="model.PointingOverlayRadius" Min="0" Max="10000" Step="10" />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                        Radius from zenith to the horizon.
                                        This value could be larger than your FOV depending on lens and sensor size.
                                    </RadzenText>
                                </Helper>
                            </RadzenFormField>

                            <RadzenFormField Text="X Offset [px]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <ChildContent>
                                    <RadzenNumeric @bind-Value="model.PointingOverlayXOffset" Min="-10000" Max="10000" Step="10" />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                        Adjust the pointing overlay in the X direction.
                                    </RadzenText>
                                </Helper>
                            </RadzenFormField>

                            <RadzenFormField Text="Y Offset [px]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <ChildContent>
                                    <RadzenNumeric @bind-Value="model.PointingOverlayYOffset" Min="-10000" Max="10000" Step="10" />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                        Adjust the pointing overlay in the Y direction.
                                    </RadzenText>
                                </Helper>
                            </RadzenFormField>

                            <RadzenFormField Text="Rotation [deg]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                                <ChildContent>
                                    <RadzenNumeric @bind-Value="model.PointingOverlayRotation" Min="-180" Max="180" />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                        Positive is counter-clockwise. Rotation occurs before flipping.
                                    </RadzenText>
                                </Helper>
                            </RadzenFormField>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                <RadzenSwitch Name="PointingOverlayFlipVertical" @bind-Value="model.PointingOverlayFlipVertical" />
                                <RadzenLabel Text="Flip Vertical" Component="PointingOverlayFlipVertical" />
                            </RadzenStack>

                            <RadzenDataGrid @ref=_pointingOverlayDataGrid TItem="PointingOverlayModel" Data="@pointingOverlays" AllowFiltering="false" AllowPaging="false" AllowSorting="false" AllowColumnResize="true"
                            AllowAlternatingRows="false" EditMode="DataGridEditMode.Single" RowUpdate="OnUpdatePointingOverlayRow" RowCreate="OnCreatePointingOverlayRow">
                                <HeaderTemplate>
                                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Text="Add New Pointing Overlay" Click="InsertPointingOverlayRow" Disabled="@(pointingOverlaysToInsert.Count > 0)" />
                                </HeaderTemplate>
                                <EmptyTemplate>
                                    <RadzenText TextAlign="TextAlign.Center">No overlays.</RadzenText>
                                </EmptyTemplate>
                                <Columns>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.Hostname)" title="Hostname" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenTextBox @bind-Value=item.Hostname Style="width: 90%;" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.DisplayName)" title="Display Name" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenTextBox @bind-Value=item.DisplayName Style="width: 90%;" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.Color)" Title="Color" Width="96px" TextAlign="TextAlign.Center">
                                        <Template Context="item">
                                            <svg width="32" height="32">
                                                <circle cx="16" cy="16" r="12" fill="@item.Color" />
                                            </svg>
                                        </Template>
                                        <EditTemplate Context="item">
                                            <RadzenColorPicker @bind-Value=item.Color ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.Size)" Title="Crosshair Size" Width="136px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.Size TValue="int" Min="8" Max="1000" Step="1" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.LineWidth)" Title="Line Width" Width="96px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.LineWidth TValue="int" Min="1" Max="100" Step="1" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.FontSize)" Title="Font Size" Width="96px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.FontSize TValue="int" Min="8" Max="1000" Step="1" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.StrokeColor)" Title="Stroke Color" Width="96px" TextAlign="TextAlign.Center">
                                        <Template Context="item">
                                            <svg width="32" height="32">
                                                <circle cx="16" cy="16" r="12" fill="@item.StrokeColor" />
                                            </svg>
                                        </Template>
                                        <EditTemplate Context="item">
                                            <RadzenColorPicker @bind-Value=item.StrokeColor ShowHSV="true" ShowRGBA="false" ShowColors="true" ShowButton="false" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Property="@nameof(PointingOverlayModel.StrokeWidth)" Title="Stroke Width" Width="96px" TextAlign="TextAlign.Center">
                                        <EditTemplate Context="item">
                                            <RadzenNumeric @bind-Value=item.StrokeWidth TValue="int" Min="0" Max="100" Step="1" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="150px" TextAlign="TextAlign.Right">
                                        <Template Context="item">
                                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditPointingOverlayRow(item))" @onclick:stopPropagation="true" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeletePointingOverlayRow(item))" @onclick:stopPropagation="true" />
                                        </Template>
                                        <EditTemplate Context="item">
                                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SavePointingOverlayRow(item))" aria-label="Save" />
                                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEditPointingOverlay(item))" aria-label="Cancel" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeletePointingOverlayRow(item))" aria-label="Delete" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>

                                </Columns>
                            </RadzenDataGrid>
                        </RadzenStack>
                    </RadzenCard>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenRow>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </RadzenRow>

    </RadzenStack>
</RadzenTemplateForm>

@code {
    private RadzenDataGrid<TextOverlayModel> _textOverlayDataGrid = null!;
    private RadzenDataGrid<PointingOverlayModel> _pointingOverlayDataGrid = null!;

    private ProcessingSettingsModel model = new();
    private string selectedTextColor = "rgb(255, 255, 255)";
    private string selectedTextOutlineColor = "rgb(0, 0, 0)";
    private List<string> cardinalDirections = ["N", "S", "E", "W"];
    private List<string> positionProviderNames = [];
    private string selectedPositionProvider = string.Empty;

    // Text Overlays
    private List<TextOverlayModel> textOverlays = [];
    private List<TextOverlayModel> textOverlaysToInsert = [];
    private List<TextOverlayModel> textOverlaysToUpdate = [];
    private TextOverlayModel? _originalTextOverlay;

    // Pointing Overlays
    private List<PointingOverlayModel> pointingOverlays = [];
    private List<PointingOverlayModel> pointingOverlaysToInsert = [];
    private List<PointingOverlayModel> pointingOverlaysToUpdate = [];
    private PointingOverlayModel? _originalPointingOverlay;

    protected override void OnInitialized()
    {
        positionProviderNames = new(PositionProviders.Select(x => x.Name));
        selectedPositionProvider = positionProviderNames.FirstOrDefault() ?? "None";

        model.WbRedScale = Profile.Current.Processing.WbRedScale;
        model.WbGreenScale = Profile.Current.Processing.WbGreenScale;
        model.WbBlueScale = Profile.Current.Processing.WbBlueScale;
        model.CircleMaskDiameter = Profile.Current.Processing.CircleMaskDiameter;
        model.CircleMaskOffsetX = Profile.Current.Processing.CircleMaskOffsetX;
        model.CircleMaskOffsetY = Profile.Current.Processing.CircleMaskOffsetY;
        model.CircleMaskBlur = Profile.Current.Processing.CircleMaskBlur;
        model.DrawCardinalOverlay = Profile.Current.Processing.DrawCardinalOverlay;
        model.TextSize = Profile.Current.Processing.TextSize;
        model.TextOutline = Profile.Current.Processing.TextOutline;
        model.TextColor = Profile.Current.Processing.TextColor;
        model.TextOutlineColor = Profile.Current.Processing.TextOutlineColor;
        model.CardinalTopString = Profile.Current.Processing.CardinalTopString;
        model.CardinalBottomString = Profile.Current.Processing.CardinalBottomString;
        model.CardinalRightString = Profile.Current.Processing.CardinalRightString;
        model.CardinalLeftString = Profile.Current.Processing.CardinalLeftString;
        model.PanoramaCardinal0AzimuthString = Profile.Current.Processing.PanoramaCardinal0AzimuthString;
        model.PanoramaCardinal90AzimuthString = Profile.Current.Processing.PanoramaCardinal90AzimuthString;
        model.PanoramaCardinal180AzimuthString = Profile.Current.Processing.PanoramaCardinal180AzimuthString;
        model.PanoramaCardinal270AzimuthString = Profile.Current.Processing.PanoramaCardinal270AzimuthString;
        model.AutoSCurve = Profile.Current.Processing.AutoSCurve;
        model.AutoSCurveContrast = Profile.Current.Processing.AutoSCurveContrast;
        model.HotPixelCorrection = Profile.Current.Processing.HotPixelCorrection;
        model.HotPixelThresholdPercent = Profile.Current.Processing.HotPixelThresholdPercent;
        model.EnableTextOverlays = Profile.Current.Processing.EnableTextOverlays;
        model.EnablePointingOverlays = Profile.Current.Processing.EnablePointingOverlays;
        model.PrometheusMountPositionUrl = Profile.Current.Processing.PrometheusMountPositionUrl;
        model.PointingOverlayAltitudeThreshold = Profile.Current.Processing.PointingOverlayAltitudeThreshold;
        model.PointingOverlayRadius = Profile.Current.Processing.PointingOverlayRadius;
        model.PointingOverlayXOffset = Profile.Current.Processing.PointingOverlayXOffset;
        model.PointingOverlayYOffset = Profile.Current.Processing.PointingOverlayYOffset;
        model.PointingOverlayRotation = Profile.Current.Processing.PointingOverlayRotation;
        model.PointingOverlayFlipVertical = Profile.Current.Processing.PointingOverlayFlipVertical;

        textOverlays = new(Profile.Current.Processing.TextOverlays
            .Select(item => new TextOverlayModel
            {
                Variable = item.Variable,
                TextFormat = item.Format ?? string.Empty,
                X = item.X,
                Y = item.Y,
                FontSize = item.FontSize,
                TextAnchor = item.Anchor,
                TextColor = HexToRgb(item.Color),
                StrokeColor = HexToRgb(item.StrokeColor),
                StrokeWidth = item.StrokeWidth,
            }));

        pointingOverlays = new(Profile.Current.Processing.PointingOverlays
            .Select(item => new PointingOverlayModel
            {
                Hostname = item.Hostname,
                DisplayName = item.DisplayName,
                Size = item.Size,
                LineWidth = item.LineWidth,
                FontSize = item.FontSize,
                StrokeColor = HexToRgb(item.StrokeColor),
                StrokeWidth = item.StrokeWidth,
                Color = HexToRgb(item.Color),
            }));
    }

    private void OnSubmit(ProcessingSettingsModel model)
    {
        Profile.Current.Processing.WbRedScale = model.WbRedScale;
        Profile.Current.Processing.WbGreenScale = model.WbGreenScale;
        Profile.Current.Processing.WbBlueScale = model.WbBlueScale;
        Profile.Current.Processing.CircleMaskDiameter = model.CircleMaskDiameter;
        Profile.Current.Processing.CircleMaskOffsetX = model.CircleMaskOffsetX;
        Profile.Current.Processing.CircleMaskOffsetY = model.CircleMaskOffsetY;
        Profile.Current.Processing.CircleMaskBlur = model.CircleMaskBlur;
        Profile.Current.Processing.DrawCardinalOverlay = model.DrawCardinalOverlay;
        Profile.Current.Processing.TextSize = model.TextSize;
        Profile.Current.Processing.TextOutline = model.TextOutline;
        Profile.Current.Processing.TextColor = model.TextColor;
        Profile.Current.Processing.TextOutlineColor = model.TextOutlineColor;
        Profile.Current.Processing.CardinalTopString = model.CardinalTopString;
        Profile.Current.Processing.CardinalBottomString = model.CardinalBottomString;
        Profile.Current.Processing.CardinalRightString = model.CardinalRightString;
        Profile.Current.Processing.CardinalLeftString = model.CardinalLeftString;
        Profile.Current.Processing.PanoramaCardinal0AzimuthString = model.PanoramaCardinal0AzimuthString;
        Profile.Current.Processing.PanoramaCardinal90AzimuthString = model.PanoramaCardinal90AzimuthString;
        Profile.Current.Processing.PanoramaCardinal180AzimuthString = model.PanoramaCardinal180AzimuthString;
        Profile.Current.Processing.PanoramaCardinal270AzimuthString = model.PanoramaCardinal270AzimuthString;
        Profile.Current.Processing.AutoSCurve = model.AutoSCurve;
        Profile.Current.Processing.AutoSCurveContrast = model.AutoSCurveContrast;
        Profile.Current.Processing.HotPixelCorrection = model.HotPixelCorrection;
        Profile.Current.Processing.HotPixelThresholdPercent = model.HotPixelThresholdPercent;
        Profile.Current.Processing.EnableTextOverlays = model.EnableTextOverlays;
        Profile.Current.Processing.EnablePointingOverlays = model.EnablePointingOverlays;
        Profile.Current.Processing.PrometheusMountPositionUrl = model.PrometheusMountPositionUrl;
        Profile.Current.Processing.PointingOverlayAltitudeThreshold = model.PointingOverlayAltitudeThreshold;
        Profile.Current.Processing.PointingOverlayRadius = model.PointingOverlayRadius;
        Profile.Current.Processing.PointingOverlayXOffset = model.PointingOverlayXOffset;
        Profile.Current.Processing.PointingOverlayYOffset = model.PointingOverlayYOffset;
        Profile.Current.Processing.PointingOverlayRotation = model.PointingOverlayRotation;
        Profile.Current.Processing.PointingOverlayFlipVertical = model.PointingOverlayFlipVertical;

        Profile.Current.Processing.TextOverlays.Clear();
        foreach (var item in textOverlays)
        {
            Profile.Current.Processing.TextOverlays.Add(new()
            {
                Variable = item.Variable,
                Format = item.TextFormat,
                X = item.X,
                Y = item.Y,
                FontSize = item.FontSize,
                Anchor = item.TextAnchor,
                Color = RgbToHex(item.TextColor),
                StrokeColor = RgbToHex(item.StrokeColor),
                StrokeWidth = item.StrokeWidth,
            });
        }

        Profile.Current.Processing.PointingOverlays.Clear();
        foreach (var item in pointingOverlays)
        {
            Profile.Current.Processing.PointingOverlays.Add(new()
            {
                Hostname = item.Hostname,
                DisplayName = item.DisplayName,
                Size = item.Size,
                LineWidth = item.LineWidth,
                FontSize = item.FontSize,
                StrokeColor = RgbToHex(item.StrokeColor),
                StrokeWidth = item.StrokeWidth,
                Color = RgbToHex(item.Color),
            });
        }

        NotificationService.Notify(new Radzen.NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Duration = 2000,
            Summary = "Saved!",
        });
    }

    #region Text Overlay DataGrid

    private void ResetTextOverlayGrid()
    {
        textOverlaysToInsert.Clear();
        textOverlaysToUpdate.Clear();
    }

    private void ResetTextOverlayGrid(TextOverlayModel model)
    {
        textOverlaysToInsert.Remove(model);
        textOverlaysToUpdate.Remove(model);
    }

    private async Task EditTextOverlayRow(TextOverlayModel model)
    {
        // Only allow a single row to be edited at any time
        if (textOverlaysToUpdate.Count > 0) return;

        if (textOverlaysToInsert.Count > 0)
        {
            ResetTextOverlayGrid();
        }

        _originalTextOverlay = model with { Key = Guid.NewGuid() };
        textOverlaysToUpdate.Add(model);
        await _textOverlayDataGrid.EditRow(model);
    }

    private void OnUpdateTextOverlayRow(TextOverlayModel model)
    {
        ResetTextOverlayGrid(model);
    }

    private async Task SaveTextOverlayRow(TextOverlayModel model)
    {
        await _textOverlayDataGrid.UpdateRow(model);
    }

    private async Task CancelEditTextOverlay(TextOverlayModel model)
    {
        ResetTextOverlayGrid(model);

        _textOverlayDataGrid.CancelEditRow(model);

        int index = textOverlays.IndexOf(model);
        if (index != -1 && _originalTextOverlay is not null)
        {
            textOverlays[index] = _originalTextOverlay;
        }

        await _textOverlayDataGrid.Reload();
    }

    private async Task DeleteTextOverlayRow(TextOverlayModel model)
    {
        ResetTextOverlayGrid(model);

        if (textOverlays.Contains(model))
        {
            textOverlays.Remove(model);
            await _textOverlayDataGrid.Reload();
        }
        else
        {
            _textOverlayDataGrid.CancelEditRow(model);
            await _textOverlayDataGrid.Reload();
        }
    }

    private async Task InsertTextOverlayRow()
    {
        ResetTextOverlayGrid();

        var model = new TextOverlayModel();
        OnTextOverlayVariableChanged(model);
        textOverlaysToInsert.Add(model);
        await _textOverlayDataGrid.InsertRow(model);
    }

    private void OnCreateTextOverlayRow(TextOverlayModel model)
    {
        textOverlays.Add(model);
        textOverlaysToInsert.Remove(model);
    }

    private void OnTextOverlayVariableChanged(TextOverlayModel model)
    {
        model.TextFormat = GetTextOverlayDefaultFormat(model.Variable);
    }

    private string GetTextOverlayDefaultFormat(OverlayVariable variable) => variable switch
    {
        OverlayVariable.Timestamp => "{0:yyyy-MM-dd HH:mm:ss}",
        OverlayVariable.Latitude => "LAT {0:F2}",
        OverlayVariable.Longitude => "LON {0:F2}",
        OverlayVariable.Elevation => "ELV {0:F0}",
        OverlayVariable.Exposure => "Exposure {0:0.000000}",
        OverlayVariable.Gain => "Gain {0:D}",
        OverlayVariable.SunAltitude => "Sun {0:F1}°",
        OverlayVariable.Text => "Text Here",
        _ => "",
    };

    #endregion

    #region Pointing Overlay DataGrid

    private void ResetPointingOverlayGrid()
    {
        pointingOverlaysToInsert.Clear();
        pointingOverlaysToUpdate.Clear();
    }

    private void ResetPointingOverlayGrid(PointingOverlayModel model)
    {
        pointingOverlaysToInsert.Remove(model);
        pointingOverlaysToUpdate.Remove(model);
    }

    private async Task EditPointingOverlayRow(PointingOverlayModel model)
    {
        // Only allow a single row to be edited at any time
        if (pointingOverlaysToUpdate.Count > 0) return;

        if (pointingOverlaysToInsert.Count > 0)
        {
            ResetPointingOverlayGrid();
        }

        _originalPointingOverlay = model with { Key = Guid.NewGuid() };
        pointingOverlaysToUpdate.Add(model);
        await _pointingOverlayDataGrid.EditRow(model);
    }

    private void OnUpdatePointingOverlayRow(PointingOverlayModel model)
    {
        ResetPointingOverlayGrid(model);
    }

    private async Task SavePointingOverlayRow(PointingOverlayModel model)
    {
        await _pointingOverlayDataGrid.UpdateRow(model);
    }

    private async Task CancelEditPointingOverlay(PointingOverlayModel model)
    {
        ResetPointingOverlayGrid(model);

        _pointingOverlayDataGrid.CancelEditRow(model);

        int index = pointingOverlays.IndexOf(model);
        if (index != -1 && _originalPointingOverlay is not null)
        {
            pointingOverlays[index] = _originalPointingOverlay;
        }

        await _pointingOverlayDataGrid.Reload();
    }

    private async Task DeletePointingOverlayRow(PointingOverlayModel model)
    {
        ResetPointingOverlayGrid(model);

        if (pointingOverlays.Contains(model))
        {
            pointingOverlays.Remove(model);
            await _pointingOverlayDataGrid.Reload();
        }
        else
        {
            _pointingOverlayDataGrid.CancelEditRow(model);
            await _pointingOverlayDataGrid.Reload();
        }
    }

    private async Task InsertPointingOverlayRow()
    {
        ResetPointingOverlayGrid();

        var model = new PointingOverlayModel
        {
            Hostname = "COMPUTERNAME",
            DisplayName = "Astro PC",
        };
        pointingOverlays.Add(model);
        await _pointingOverlayDataGrid.InsertRow(model);
    }

    private void OnCreatePointingOverlayRow(PointingOverlayModel model)
    {
        pointingOverlays.Add(model);
        pointingOverlaysToInsert.Remove(model);
    }

    #endregion

    private string RgbToHex(string rgb)
    {
        try
        {
            // rgb(0, 0, 0)
            int[] split = rgb[4..^1]
                .Split(',', StringSplitOptions.TrimEntries)
                .Select(s => int.Parse(s))
                .ToArray();
            return $"#{split[0]:x02}{split[1]:x02}{split[2]:x02}";
        }
        catch
        {
            return "#ffffff";
        }
    }

    private string HexToRgb(string hex)
    {
        try
        {
            int r = int.Parse(hex[1..3], System.Globalization.NumberStyles.HexNumber);
            int g = int.Parse(hex[3..5], System.Globalization.NumberStyles.HexNumber);
            int b = int.Parse(hex[5..7], System.Globalization.NumberStyles.HexNumber);
            return $"rgb({r}, {g}, {b})";
        }
        catch
        {
            return "rgb(255, 255, 255)";
        }
    }

    public record ProcessingSettingsModel
    {
        public double WbRedScale { get; set; }
        public double WbGreenScale { get; set; }
        public double WbBlueScale { get; set; }
        public double WbRedBias { get; set; }
        public double WbGreenBias { get; set; }
        public double WbBlueBias { get; set; }
        public int CircleMaskDiameter { get; set; }
        public int CircleMaskOffsetX { get; set; }
        public int CircleMaskOffsetY { get; set; }
        public int CircleMaskBlur { get; set; }
        public bool DrawCardinalOverlay { get; set; }
        public int TextSize { get; set; }
        public int TextOutline { get; set; }
        public string TextColor { get; set; } = null!;
        public string TextOutlineColor { get; set; } = null!;
        public string CardinalTopString { get; set; } = null!;
        public string CardinalBottomString { get; set; } = null!;
        public string CardinalRightString { get; set; } = null!;
        public string CardinalLeftString { get; set; } = null!;
        public string PanoramaCardinal0AzimuthString { get; set; } = null!;
        public string PanoramaCardinal90AzimuthString { get; set; } = null!;
        public string PanoramaCardinal180AzimuthString { get; set; } = null!;
        public string PanoramaCardinal270AzimuthString { get; set; } = null!;
        public bool AutoSCurve{ get; set; }
        public double AutoSCurveContrast { get; set; }
        public bool HotPixelCorrection { get; set; }
        public int HotPixelThresholdPercent { get; set; }
        public bool EnableTextOverlays { get; set; }
        public bool EnablePointingOverlays { get; set; }
        public string PrometheusMountPositionUrl { get; set; } = null!;
        public int PointingOverlayAltitudeThreshold { get; set; }
        public int PointingOverlayRadius { get; set; }
        public int PointingOverlayXOffset { get; set; }
        public int PointingOverlayYOffset { get; set; }
        public double PointingOverlayRotation { get; set; }
        public bool PointingOverlayFlipVertical { get; set; }
    }

    public record TextOverlayModel
    {
        public Guid Key { get; set; } = Guid.NewGuid();
        public OverlayVariable Variable { get; set; }
        public string TextFormat { get; set; } = string.Empty;
        public int X { get; set; }
        public int Y { get; set; }
        public int FontSize { get; set; } = 30;
        public string TextColor { get; set; } = "rgb(255, 255, 255)";
        public TextAnchor TextAnchor { get; set; }
        public string StrokeColor { get; set; } = "rgb(0, 0, 0)";
        public int StrokeWidth { get; set; } = 2;
    }

    public record PointingOverlayModel
    {
        public Guid Key { get; set; } = Guid.NewGuid();
        public string Hostname { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public int Size { get; set; } = 30;
        public int LineWidth { get; set; } = 5;
        public int FontSize { get; set; } = 30;
        public string StrokeColor { get; set; } = "rgb(0, 0, 0)";
        public int StrokeWidth { get; set; } = 4;
        public string Color { get; set; } = "rgb(255, 255, 255)";
    }
}
