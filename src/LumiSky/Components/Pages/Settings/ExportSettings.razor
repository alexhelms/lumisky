@using LumiSky.Core.IO
@using LumiSky.Core.Profile
@using LumiSky.Core.Services
@implements IDisposable
@inject IProfileProvider Profile
@inject FtpService FtpService
@inject Radzen.NotificationService NotificationService

<RadzenTemplateForm TItem="ExportSettingsModel" Data="@model" Submit="OnSubmit">
    <RadzenStack>

        <RadzenFieldset class="ls-shadow">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>General</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="EnableExport" @bind-Value="model.EnableExport" />
                        <RadzenLabel Text="Enable Exporting" Component="EnableExport" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="ExportRaws" @bind-Value="model.ExportRaws" />
                        <RadzenLabel Text="Export Raws" Component="ExportRaws" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="ExportImages" @bind-Value="model.ExportImages" />
                        <RadzenLabel Text="Export Images" Component="ExportImages" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="ExportPanoramas" @bind-Value="model.ExportPanoramas" />
                        <RadzenLabel Text="Export Panorama" Component="ExportPanoramas" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="ExportTimelapses" @bind-Value="model.ExportTimelapses" />
                        <RadzenLabel Text="Export Timelapses" Component="ExportTimelapses" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="ExportPanoramaTimelapses" @bind-Value="model.ExportPanoramaTimelapses" />
                        <RadzenLabel Text="Export Panorama Timelapses" Component="ExportPanoramaTimelapses" />
                    </RadzenStack>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset class="ls-shadow">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>FTP</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="EnableFtp" @bind-Value="model.EnableFtp" />
                        <RadzenLabel Text="Enable FTP" Component="EnableFtp" />
                    </RadzenStack>

                    <RadzenFormField Text="Host" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenTextBox @bind-Value="model.FtpHostname" />
                    </RadzenFormField>

                    <RadzenFormField Text="Port" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.FtpPort" Min="1" Max="65535" />
                    </RadzenFormField>

                    <RadzenFormField Text="Username" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenTextBox @bind-Value="model.FtpUsername" />
                    </RadzenFormField>

                    <RadzenFormField Text="Password" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenPassword @bind-Value="model.FtpPassword" />
                    </RadzenFormField>

                    <RadzenFormField Text="Remote Path" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenTextBox @bind-Value="model.FtpRemotePath" />
                    </RadzenFormField>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="EnableCertificateValidation" @bind-Value="model.EnableCertificateValidation" />
                        <RadzenLabel Text="Validate Certificates" Component="EnableCertificateValidation" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                        <RadzenButton Text="Test Connection" Click="@(async () => await CheckFtpConnection())" IsBusy="@isCheckingFtp" class="ls-shadow" />
                    </RadzenStack>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenRow>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" class="ls-shadow" />
        </RadzenRow>

    </RadzenStack>
</RadzenTemplateForm>

@code {
    private ExportSettingsModel model = new();
    private CancellationTokenSource? _ftpCts;
    private bool isCheckingFtp;

    protected override void OnInitialized()
    {
        model.EnableExport = Profile.Current.Export.EnableExport;
        model.ExportRaws = Profile.Current.Export.ExportRaws;
        model.ExportImages = Profile.Current.Export.ExportImages;
        model.ExportPanoramas = Profile.Current.Export.ExportPanoramas;
        model.ExportTimelapses = Profile.Current.Export.ExportTimelapses;
        model.ExportPanoramaTimelapses = Profile.Current.Export.ExportPanoramaTimelapses;
        model.EnableFtp = Profile.Current.Export.EnableFtp;
        model.FtpHostname = Profile.Current.Export.FtpHostname;
        model.FtpPort = Profile.Current.Export.FtpPort;
        model.FtpUsername = Profile.Current.Export.FtpUsername;
        model.FtpPassword = Profile.Current.Export.FtpPassword;
        model.FtpRemotePath = Profile.Current.Export.FtpRemotePath;
        model.EnableCertificateValidation = Profile.Current.Export.EnableCertificateValidation;
    }

    public void Dispose()
    {
        _ftpCts?.Cancel();
        _ftpCts?.Dispose();
    }

    private void OnSubmit(ExportSettingsModel model)
    {
        Profile.Current.Export.EnableExport = model.EnableExport;
        Profile.Current.Export.ExportRaws = model.ExportRaws;
        Profile.Current.Export.ExportImages = model.ExportImages;
        Profile.Current.Export.ExportPanoramas = model.ExportPanoramas;
        Profile.Current.Export.ExportTimelapses = model.ExportTimelapses;
        Profile.Current.Export.ExportPanoramaTimelapses = model.ExportPanoramaTimelapses;
        Profile.Current.Export.EnableFtp = model.EnableFtp;
        Profile.Current.Export.FtpHostname = model.FtpHostname;
        Profile.Current.Export.FtpPort = model.FtpPort;
        Profile.Current.Export.FtpUsername = model.FtpUsername;
        Profile.Current.Export.FtpPassword = model.FtpPassword;
        Profile.Current.Export.FtpRemotePath = model.FtpRemotePath;
        Profile.Current.Export.EnableCertificateValidation = model.EnableCertificateValidation;

        NotificationService.Notify(new Radzen.NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Duration = 2000,
            Summary = "Saved!",
        });
    }

    private async Task CheckFtpConnection()
    {
        bool success = false;

        try
        {
            isCheckingFtp = true;
            await InvokeAsync(StateHasChanged);

            _ftpCts = new();
            await FtpService.TryConnect(_ftpCts.Token);

            success = true;
        }
        catch (Exception e)
        {
            if (e is System.Net.Sockets.SocketException se)
            {
                if (se.SocketErrorCode == System.Net.Sockets.SocketError.ConnectionRefused)
                {

                }
            }

            Log.Error(e, "Error checking ftp connection: {Message}", e.Message);
        }
        finally
        {
            isCheckingFtp = false;
            await InvokeAsync(StateHasChanged);
        }

        if (success)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Duration = 2000,
                Summary = "FTP connection is OK!",
            });
        }
        else
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Duration = 2000,
                Summary = "Could not connect to FTP server!",
                Detail = "Check the hostname and credentials and try again."
            });
        }
    }

    public record ExportSettingsModel
    {
        public bool EnableExport { get; set; }
        public bool ExportRaws { get; set; }
        public bool ExportImages { get; set; }
        public bool ExportPanoramas { get; set; }
        public bool ExportTimelapses { get; set; }
        public bool ExportPanoramaTimelapses { get; set; }
        public bool EnableFtp { get; set; }
        public string FtpHostname { get; set; } = null!;
        public int FtpPort { get; set; }
        public string FtpUsername { get; set; } = null!;
        public string FtpPassword { get; set; } = null!;
        public string FtpRemotePath { get; set; } = null!;
        public bool EnableCertificateValidation { get; set; }
    }
}
