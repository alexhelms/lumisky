@using LumiSky.Core.Imaging
@using LumiSky.Core.Profile
@inject IProfileProvider Profile
@inject NotificationService NotificationService

<RadzenTemplateForm TItem="ImageSettingsModel" Data="@model" Submit="OnSubmit">
    <RadzenStack>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>General</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenFormField Text="File Type" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenDropDown TValue="ImageFileType" Data=@FileTypes @bind-Value=model.FileType />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                JPEG compression is lossy.
                                <br />
                                PNG compression is lossless.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="KeepRawImages" @bind-Value="model.KeepRawImages" />
                        <RadzenLabel Text="Keep Raw Images" Component="KeepRawImages" />
                    </RadzenStack>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>JPEG</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenFormField Text="Quality" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.JpegQuality" Min="0" Max="100" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">Default quality is 90.</RadzenText>
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>PNG</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenFormField Text="Compression" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.PngCompression" Min="0" Max="9" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">Default compression is 5. Higher is more compressed but takes more CPU time.</RadzenText>
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Image Geometry</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenFormField Text="Rotation [deg]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.Rotation" Min="-180" Max="180" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                Positive values mean counter-clockwise rotation.
                                Rotation occurs before flipping.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="FlipHorizontal" @bind-Value="model.FlipHorizontal" />
                        <RadzenLabel Text="Flip Horizontal" Component="FlipHorizontal" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="FlipVertical" @bind-Value="model.FlipVertical" />
                        <RadzenLabel Text="Flip Vertical" Component="FlipVertical" />
                    </RadzenStack>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Panorama Geometry</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="CreatePano" @bind-Value="model.CreatePano" />
                        <RadzenLabel Text="Create Panoramas" Component="CreatePano" />
                    </RadzenStack>

                    <RadzenFormField Text="Diameter [px]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.PanoDiameter" Min="0" Max="5000" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                Diameter of the fisheye circle.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="X Offset [px]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.PanoXOffset" Min="-5000" Max="5000" />
                    </RadzenFormField>

                    <RadzenFormField Text="Y Offset [px]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.PanoYOffset" Min="-5000" Max="5000" />
                    </RadzenFormField>

                    <RadzenFormField Text="Rotation [deg]" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.PanoRotation" Min="-180" Max="180" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                Positive values mean counter-clockwise rotation.
                                Rotation occurs before flipping.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch Name="PanoFlipHorizontal" @bind-Value="model.PanoFlipHorizontal" />
                        <RadzenLabel Text="Flip Horizontal" Component="PanoFlipHorizontal" />
                    </RadzenStack>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenRow>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </RadzenRow>

    </RadzenStack>
</RadzenTemplateForm>

@code {
    private ImageSettingsModel model = new();
    private IEnumerable<ImageFileType> FileTypes => Enum.GetValues<ImageFileType>();

    protected override void OnInitialized()
    {
        model.FileType = Profile.Current.Image.FileType;
        model.KeepRawImages = Profile.Current.Image.KeepRawImages;
        model.JpegQuality = Profile.Current.Image.JpegQuality;
        model.PngCompression = Profile.Current.Image.PngCompression;
        model.Rotation = Profile.Current.Image.Rotation;
        model.FlipHorizontal = Profile.Current.Image.FlipHorizontal;
        model.FlipVertical = Profile.Current.Image.FlipVertical;
        model.CreatePano = Profile.Current.Image.CreatePano;
        model.PanoDiameter = Profile.Current.Image.PanoDiameter;
        model.PanoXOffset = Profile.Current.Image.PanoXOffset;
        model.PanoYOffset = Profile.Current.Image.PanoYOffset;
        model.PanoRotation = Profile.Current.Image.PanoRotation;
        model.PanoFlipHorizontal = Profile.Current.Image.PanoFlipHorizontal;
    }

    private void OnSubmit(ImageSettingsModel model)
    {
        Profile.Current.Image.FileType = model.FileType;
        Profile.Current.Image.KeepRawImages = model.KeepRawImages;
        Profile.Current.Image.JpegQuality = model.JpegQuality;
        Profile.Current.Image.PngCompression = model.PngCompression;
        Profile.Current.Image.Rotation = model.Rotation;
        Profile.Current.Image.FlipHorizontal = model.FlipHorizontal;
        Profile.Current.Image.FlipVertical = model.FlipVertical;
        Profile.Current.Image.CreatePano = model.CreatePano;
        Profile.Current.Image.PanoDiameter = model.PanoDiameter;
        Profile.Current.Image.PanoXOffset = model.PanoXOffset;
        Profile.Current.Image.PanoYOffset = model.PanoYOffset;
        Profile.Current.Image.PanoRotation = model.PanoRotation;
        Profile.Current.Image.PanoFlipHorizontal = model.PanoFlipHorizontal;

    NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Duration = 2000,
            Summary = "Saved!",
        });
    }

    public record ImageSettingsModel
    {
        public ImageFileType FileType { get; set; }
        public bool KeepRawImages { get; set; }
        public int JpegQuality { get; set; }
        public int PngCompression { get; set; }
        public double Rotation { get; set; }
        public bool FlipHorizontal { get; set; }
        public bool FlipVertical { get; set; }
        public bool CreatePano { get; set; }
        public double PanoDiameter { get; set; }
        public double PanoXOffset { get; set; }
        public double PanoYOffset { get; set; }
        public double PanoRotation { get; set; }
        public bool PanoFlipHorizontal { get; set; }
    }
}
