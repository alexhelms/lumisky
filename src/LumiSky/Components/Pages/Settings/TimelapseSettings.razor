@using LumiSky.Core.Profile
@inject IProfileProvider Profile
@inject NotificationService NotificationService

<RadzenTemplateForm TItem="TimelapseSettingsModel" Data="@model" Submit="OnSubmit">
    <RadzenStack>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Ffmpeg</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenText TextStyle="TextStyle.Body2">
                        Absolute path to ffmpeg and ffprobe executables.
                    </RadzenText>

                    <RadzenFormField Text="Ffmpeg Path" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenTextBox Name="FfmpegPath" @bind-Value="model.FfmpegPath" />
                        </ChildContent>
                        <Helper>
                            <RadzenCustomValidator Component="FfmpegPath" Validator="@(() => CheckFileExists(model.FfmpegPath))"
                                                   Text="Ffmpeg not found." Popup="true" Style="z-index: 1;" />
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Ffprobe Path" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenTextBox Name="FfprobePath" @bind-Value="model.FfprobePath" />
                        </ChildContent>
                        <Helper>
                            <RadzenCustomValidator Component="FfprobePath" Validator="@(() => CheckFileExists(model.FfprobePath))"
                                                   Text="FfprobePath not found." Popup="true" Style="z-index: 1;" />
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Timelapse</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch @bind-Value="model.EnableDaytimeTimelapse" />
                        <RadzenLabel Text="Daytime Timelapse" Component="True" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch @bind-Value="model.EnableNighttimeTimelapse" />
                        <RadzenLabel Text="Nighttime Timelapse" Component="True" />
                    </RadzenStack>

                    <RadzenFormField Text="Codec" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenDropDown @bind-Value=model.TimelapseCodec Data="@(Enum.GetValues<Core.Profile.VideoCodec>())" Style="width: 90%;" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                H264 is more portable. H265 is typically smaller in file size but cannot be viewed in the browser.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Frame Rate" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.TimelapseFrameRate" Min="1" Max="120" Step="1" />
                    </RadzenFormField>

                    <RadzenFormField Text="Quality" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.TimelapseQuality" Min="0" Max="51" Step="1" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                CRF value for h264/h265 encoding. A lower value leads to higher quality at the expense of a larger file size.
                                For h264 consider a value of 25. For h265 consider a value of 28 to be about equivalent in quality.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Output Width" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.TimelapseWidth" Min="0" Max="10000" Step="1" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                Set the pixel width of the output video. Height is automatically calculated to maintain aspect ratio.
                                Reducing the pixel width can drastically reduce the size of the output video.
                                Set to 0 to disable scaling.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.Body1" class="rz-mb-0"><strong>Panorama Timelapse</strong></RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch @bind-Value="model.EnableDaytimePanorama" />
                        <RadzenLabel Text="Daytime Panorama Timelapse" Component="True" />
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSwitch @bind-Value="model.EnableNighttimePanorama" />
                        <RadzenLabel Text="Nighttime Panorama Timelapse" Component="True" />
                    </RadzenStack>

                    <RadzenFormField Text="Codec" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenDropDown @bind-Value=model.PanoramaCodec Data="@(Enum.GetValues<Core.Profile.VideoCodec>())" Style="width: 90%;" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                H264 is more portable. H265 is typically smaller in file size but cannot be viewed in the browser.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Frame Rate" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenNumeric @bind-Value="model.PanoramaFrameRate" Min="1" Max="120" Step="1" />
                    </RadzenFormField>

                    <RadzenFormField Text="Quality" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.PanoramaQuality" Min="0" Max="51" Step="1" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                CRF value for h264/h265 encoding. A lower value leads to higher quality at the expense of a larger file size.
                                For h264 consider a value of 25. For h265 consider a value of 28 to be about equivalent in quality.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Output Width" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <ChildContent>
                            <RadzenNumeric @bind-Value="model.PanoramaWidth" Min="0" Max="10000" Step="1" />
                        </ChildContent>
                        <Helper>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2 rz-mb-0">
                                Set the pixel width of the output video. Height is automatically calculated to maintain aspect ratio.
                                Reducing the pixel width can drastically reduce the size of the output video.
                                Set to 0 to disable scaling.
                            </RadzenText>
                        </Helper>
                    </RadzenFormField>

                </RadzenStack>
            </ChildContent>
        </RadzenFieldset>

        <RadzenRow>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </RadzenRow>

    </RadzenStack>
</RadzenTemplateForm>

@code {
    private TimelapseSettingsModel model = new();

    protected override void OnInitialized()
    {
        model.FfmpegPath = Profile.Current.Generation.FfmpegPath;
        model.FfprobePath = Profile.Current.Generation.FfprobePath;
        model.EnableDaytimeTimelapse = Profile.Current.Generation.EnableDaytimeTimelapse;
        model.EnableNighttimeTimelapse = Profile.Current.Generation.EnableNighttimeTimelapse;
        model.TimelapseFrameRate = Profile.Current.Generation.TimelapseFrameRate;
        model.TimelapseQuality = Profile.Current.Generation.TimelapseQuality;
        model.TimelapseWidth = Profile.Current.Generation.TimelapseWidth;
        model.TimelapseCodec = Profile.Current.Generation.TimelapseCodec;
        model.EnableDaytimePanorama = Profile.Current.Generation.EnableDaytimePanorama;
        model.EnableNighttimePanorama = Profile.Current.Generation.EnableNighttimePanorama;
        model.PanoramaFrameRate = Profile.Current.Generation.PanoramaFrameRate;
        model.PanoramaQuality = Profile.Current.Generation.PanoramaQuality;
        model.PanoramaWidth = Profile.Current.Generation.PanoramaWidth;
        model.PanoramaCodec = Profile.Current.Generation.PanoramaCodec;
    }

    private void OnSubmit(TimelapseSettingsModel model)
    {
        Profile.Current.Generation.FfmpegPath = model.FfmpegPath ?? string.Empty;
        Profile.Current.Generation.FfprobePath = model.FfprobePath ?? string.Empty;
        Profile.Current.Generation.EnableDaytimeTimelapse = model.EnableDaytimeTimelapse;
        Profile.Current.Generation.EnableNighttimeTimelapse = model.EnableNighttimeTimelapse;
        Profile.Current.Generation.TimelapseFrameRate = model.TimelapseFrameRate;
        Profile.Current.Generation.TimelapseQuality = model.TimelapseQuality;
        Profile.Current.Generation.TimelapseWidth = model.TimelapseWidth;
        Profile.Current.Generation.TimelapseCodec = model.TimelapseCodec;
        Profile.Current.Generation.EnableDaytimePanorama = model.EnableDaytimePanorama;
        Profile.Current.Generation.EnableNighttimePanorama = model.EnableNighttimePanorama;
        Profile.Current.Generation.PanoramaFrameRate = model.PanoramaFrameRate;
        Profile.Current.Generation.PanoramaQuality = model.PanoramaQuality;
        Profile.Current.Generation.PanoramaWidth = model.PanoramaWidth;
        Profile.Current.Generation.PanoramaCodec = model.PanoramaCodec;

        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Duration = 2000,
            Summary = "Saved!",
        });
    }

    private bool CheckFileExists(string? path)
    {
        if (path is null) return false;
        return File.Exists(path);
    }

    private record TimelapseSettingsModel
    {
        public string? FfmpegPath { get; set; }
        public string? FfprobePath { get; set; }
        public bool EnableDaytimeTimelapse { get; set; }
        public bool EnableNighttimeTimelapse { get; set; }
        public int TimelapseFrameRate { get; set; }
        public int TimelapseQuality { get; set; }
        public int TimelapseWidth { get; set; }
        public VideoCodec TimelapseCodec { get; set; }
        public bool EnableDaytimePanorama { get; set; }
        public bool EnableNighttimePanorama { get; set; }
        public int PanoramaFrameRate { get; set; }
        public int PanoramaQuality { get; set; }
        public int PanoramaWidth { get; set; }
        public VideoCodec PanoramaCodec { get; set; }
    }
}
