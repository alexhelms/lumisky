@implements IAsyncDisposable
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject AppDbContext DbContext
@page "/video/timelapse/{Id:int}"
@using Microsoft.EntityFrameworkCore

<PageTitle>Timelapse</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="@Assets["lib/video-js/dist/video-js.min.css"]" />
    <style>
        #player {
            display: block;
            width: calc(100vw - 116px);
            height: calc(100vh - 200px);
        }
    </style>
</HeadContent>

<div>
    <video id="player" controls class="video-js"></video>
</div>

@code {
    private IJSObjectReference? module;
    private string? videoUrl;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var timelapse = await DbContext.Timelapses
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id == Id);

        if (timelapse is null)
        {
            NavigationManager.NavigateTo("/404");
            return;
        }

        if (!File.Exists(timelapse.Filename))
        {
            NavigationManager.NavigateTo("/404");
            return;
        }

        videoUrl = $"/api/video/download/timelapse?id={Id}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/VideoViewer.razor.js");
        }

        if (module is not null &&
            videoUrl is not null)
        {
            await module.InvokeVoidAsync("loadPlayer", videoUrl);
        }
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);

        try
        {
            if (module is not null)
            {
                await module.InvokeVoidAsync("disposePlayer");
                await module.DisposeAsync();
            }
        }
        catch (JSDisconnectedException) { }
    }
}
