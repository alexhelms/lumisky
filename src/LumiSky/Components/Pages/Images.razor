@using LumiSky.Core.Services
@using SlimMessageBus
@using System.Runtime.InteropServices.JavaScript
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ImageService ImageService
@inject NavigationManager NavigationManager
@page "/{TabName?}"

<PageTitle>Images</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="@Assets["lib/photo-sphere-viewer/core/index.css"]" />
    <style>
        .rz-tabview-panels {
            display: flex;
        }

        .rz-tabview-panel {
            width: 100%;
        }

        .allsky-img {
            display: block;
            margin: auto;
            max-width: 100%;
            max-height: 100%;
        }

        .panorama-img {
            display: block;
            margin: auto;
            max-width: 100%;
            max-height: 100%;
        }

        .panorama-3d {
            display: block;
            width: calc(100vw - 160px);
            height: calc(100vh - 200px);
        }

        .psv-loader {
            display: none;
        }
    </style>
</HeadContent>

<RadzenTabs @bind-SelectedIndex="selectedTabIndex" Change="OnTabChanged" Style="height: 100%;">
    <Tabs>
        <RadzenTabsItem Text="Image">
            @if (latestImageUrl is not null)
            {
                <RadzenImage Path="@latestImageUrl" AlternateText="Image" class="allsky-img" />
            }
            else
            {
                <RadzenRow JustifyContent="JustifyContent.Center">
                    <RadzenText>No Image Available</RadzenText>
                </RadzenRow>
            }
        </RadzenTabsItem>

        <RadzenTabsItem Text="Panorama">
            @if (latestPanoramaUrl is not null)
            {
                <RadzenImage Path="@latestPanoramaUrl" AlternateText="Panorama" class="panorama-img" />
            }
            else
            {
                <RadzenRow JustifyContent="JustifyContent.Center">
                    <RadzenText>No Panoramas Available</RadzenText>
                </RadzenRow>
            }
        </RadzenTabsItem>

        <RadzenTabsItem Text="Panorama 3D">
            @if (latestPanoramaUrl is not null)
            {
                <div id="pano-viewer" class="panorama-3d"/>
            }
            else
            {
                <RadzenRow JustifyContent="JustifyContent.Center">
                    <RadzenText>No Panorama 3D Available</RadzenText>
                </RadzenRow>
            }
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>

@code
{
    private const int Pano3dTabIndex = 2;

    private const string LatestImageUrlBase = "/api/image/latest/image";
    private const string LatestPanoramaUrlBase = "/api/image/latest/panorama";
    private string? latestImageUrl;
    private string? latestPanoramaUrl;
    private string? prevPanoramaUrl;
    private int selectedTabIndex;
    private IJSObjectReference? module;

    [Parameter]
    public string? TabName { get; set; }

    protected override void OnInitialized()
    {
        latestImageUrl = GenerateFisheyeUrl();
        latestPanoramaUrl = GeneratePanoramaUrl();
        ImageService.NewImage += OnNewImage;
        ImageService.NewPanorama += OnNewPanorama;
    }

    protected override void OnParametersSet()
    {
        TabName ??= "images";
        SetTabIndexFromName(TabName);
    }

    private void SetTabIndexFromName(string name)
    {
        var newIndex = name switch
        {
            "image" => 0,
            "panorama" => 1,
            "panorama3d" => 2,
            _ => 0,
        };

        if (newIndex != selectedTabIndex)
        {
            selectedTabIndex = newIndex;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnTabChanged(int index)
    {
        string name = index switch
        {
            0 => "image",
            1 => "panorama",
            2 => "panorama3d",
            _ => "image",
        };

        NavigationManager.NavigateTo($"/{name}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Images.razor.js");
        }

        if (selectedTabIndex == Pano3dTabIndex &&
            latestPanoramaUrl is not null)
        {
            if (module is not null)
            {
                var size = ImageService.LatestPanoramaSize ?? default;
                await module.InvokeVoidAsync("updatePanoViewer", latestPanoramaUrl, size.Height * 2, size.Height);
            }

            prevPanoramaUrl = latestPanoramaUrl;
        }
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);
        ImageService.NewImage -= OnNewImage;
        ImageService.NewPanorama -= OnNewPanorama;

        try
        {
            if (module is not null)
            {
                await module.InvokeVoidAsync("destroyPanoViewer");
                await module.DisposeAsync();
            }
        }
        catch (JSDisconnectedException) { }
    }

    private string? GenerateFisheyeUrl()
    {
        if (ImageService.LatestImagePath is not null)
            return LatestImageUrlBase + $"?time={DateTime.Now.Ticks}";
        return null;
    }

    private string? GeneratePanoramaUrl()
    {
        if (ImageService.LatestPanoramaPath is not null)
            return LatestPanoramaUrlBase + $"?time={DateTime.Now.Ticks}";
        return null;
    }

    private void OnNewImage(object? sender, EventArgs e)
    {
        latestImageUrl = GenerateFisheyeUrl();
        InvokeAsync(StateHasChanged);
    }

    private void OnNewPanorama(object? sender, EventArgs e)
    {
        latestPanoramaUrl = GeneratePanoramaUrl();
        InvokeAsync(StateHasChanged);
    }
}