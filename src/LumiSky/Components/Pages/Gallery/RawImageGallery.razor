@using Microsoft.EntityFrameworkCore
@using LumiSky.Controllers
@using LumiSky.Core.Services
@using LumiSky.Core.Profile
@implements IDisposable
@inject IProfileProvider Profile
@inject AppDbContext DbContext
@inject ImageService ImageService

@if (!rawImagesAvailable)
{
    <RadzenRow JustifyContent="JustifyContent.Center" class="rz-my-4">
        <RadzenText>No Raw Images Available</RadzenText>
    </RadzenRow>
}
else
{
    <RadzenDataGrid @ref=grid TItem="RawImage" Data="@rawImages" AllowFiltering="true" AllowColumnResize="true"
    FilterMode="FilterMode.Simple" PageSize="25" AllowPaging="true" AllowSorting="true"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>

            <RadzenDataGridColumn Title="Favorite" Width="90px" TextAlign="TextAlign.Center">
                <Template Context="rawImage">
                    <RadzenToggleButton @key=rawImage.Id @bind-Value=rawImage.IsFavorite Change="@(value => OnFavorite(rawImage, value))" Icon="heart_plus" ToggleIcon="favorite"
                    ButtonStyle="ButtonStyle.Light" ToggleButtonStyle="ButtonStyle.Danger" ToggleShade="Shade.Dark" Size="ButtonSize.Small"
                    InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Favorite button" }})" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="Download" Width="100px" TextAlign="TextAlign.Center">
                <Template Context="rawImage">
                    <RadzenLink Path="@($"/api/image/download/raw?ts={rawImage.ExposedOn}")">
                        <RadzenButton Icon="download" Size="ButtonSize.Small" />
                    </RadzenLink>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(RawImage.Filename)" Title="Filename">
                <Template Context="rawImage">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-m-0">@Path.GetFileName(rawImage.Filename)</RadzenText>
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(RawImage.CreatedOn)" Title="Timestamp" SortOrder="SortOrder.Descending" Width="160px" TextAlign="TextAlign.Center">
                <Template Context="rawImage">
                    @DateTimeOffset.FromUnixTimeSeconds(rawImage.ExposedOn).ToLocalTime().ToString("G")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="Delete" Width="75px" TextAlign="TextAlign.Center">
                <Template Context="rawImage">
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(() => OnDelete(rawImage))" @onclick:stopPropagation="true" />
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}

@code {
    RadzenDataGrid<RawImage>? grid;
    IQueryable<RawImage>? rawImages;
    bool rawImagesAvailable;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            rawImages = DbContext.RawImages;
            rawImagesAvailable = await DbContext.RawImages.AnyAsync();

            ImageService.NewImage += OnNewImage;
        }
        catch (Exception e)
        {
            Log.Error(e, "Error getting gallery table data");
        }
    }

    public void Dispose()
    {
        ImageService.NewImage -= OnNewImage;
    }

    private async Task RefreshDataAsync()
    {
        await InvokeAsync(async () =>
        {
            try
            {
                if (grid is not null)
                {
                    await grid.RefreshDataAsync();
                }
            }
            catch (Exception e)
            {
                Log.Error(e, "Error refreshing generation table data");
            }
        });
    }

    private async void OnNewImage(object? sender, EventArgs e)
    {
        if (Profile.Current.Image.KeepRawImages)
        {
            rawImagesAvailable = true;
            await InvokeAsync(StateHasChanged);
            await RefreshDataAsync();
        }
    }

    private async Task OnDelete(RawImage rawImage)
    {
        await ImageService.DeleteRawImage(rawImage.Id);
        await RefreshDataAsync();
    }

    private async Task OnFavorite(RawImage rawImage, bool isFavorite)
    {
        await ImageService.FavoriteImage(rawImage.Id, isFavorite);
        await RefreshDataAsync();
    }
}
