@implements IDisposable

@inject NavigationManager NavigationManager
@inject ContextMenuService ContextMenuService

<RadzenPanelMenuItem Text="Images" Icon="image" Path="/"/>
@* <RadzenPanelMenuItem Text="Video" Icon="videocam" Path="/video" /> *@
<RadzenPanelMenuItem Text="Gallery" Icon="perm_media" Path="/gallery" />
@* <RadzenPanelMenuItem Text="Focus" Icon="center_focus_weak" Path="/focus" /> *@
<RadzenPanelMenuItem Text="Generate" Icon="bolt" Path="/generate" />
<RadzenPanelMenuItem Text="Settings" Icon="settings" Path="/settings" />
<RadzenPanelMenuItem Text="Log" Icon="article" Path="/log" ContextMenu="@(args => ShowContextMenuWithItems(args))" />
<hr style="border-color: #3b3c3f; border-style: solid;" class="rz-mx-2" />
<RadzenPanelMenuItem Text="About" Icon="info" Path="/about" />
<RadzenPanelMenuItem Text="Docs" Icon="help" Path="/docs" Target="_blank" />
@* <AuthorizeView>
    <Authorized>
        <RadzenPanelMenuItem Text="@context.User.Identity?.Name" Icon="dashboard" Path="Account/Manage" />
        <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <RadzenButton ButtonType="ButtonType.Submit" Style="width: 100%;">Logout</RadzenButton>
        </form>
    </Authorized>
    <NotAuthorized>
        <RadzenPanelMenuItem Text="Register" Icon="dashboard" Path="Account/Register" />
        <RadzenPanelMenuItem Text="Login" Icon="dashboard" Path="Account/Login" />
    </NotAuthorized>
</AuthorizeView> *@

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void ShowContextMenuWithItems(MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new() { Text = "Debug", Value = 1, Icon = "science" },
        }, OnMenuItemClick);
    }

    private void OnMenuItemClick(MenuItemEventArgs args)
    {
        if (args.Value is int value && value == 1)
        {
            ContextMenuService.Close();
            NavigationManager.NavigateTo("/debug");
        }
    }
}

