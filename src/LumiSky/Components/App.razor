<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <RadzenTheme Theme="standard-dark" @rendermode="PageRenderMode" />
    <ImportMap ImportMapDefinition="@importMapDefinition" />
    <HeadOutlet @rendermode="PageRenderMode" />

    <link rel="icon" type="image/png" href="@Assets["img/favicon-96x96.png"]" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="@Assets["img/favicon.svg"]" />
    <link rel="shortcut icon" href="@Assets["img/favicon.ico"]" />
    <link rel="apple-touch-icon" sizes="180x180" href="@Assets["img/apple-touch-icon.png"]" />
    <meta name="apple-mobile-web-app-title" content="LumiSky" />
    <link rel="manifest" href="@Assets["img/site.webmanifest"]" />
</head>

<body>
    <Routes @rendermode="PageRenderMode" />
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            Blazor.start();
        })
    </script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
</body>

</html>

@code {
    private ImportMapDefinition? importMapDefinition = new(
        new Dictionary<string, string>
        {
            ["three"] = "/lib/three/build/three.module.min.js",
            ["@photo-sphere-viewer/core"] = "/lib/photo-sphere-viewer/core/index.module.js",
            ["@photo-sphere-viewer/video-plugin"] = "/lib/photo-sphere-viewer/video-plugin/index.module.js",
            ["@photo-sphere-viewer/equirectangular-video-adapter"] = "/lib/photo-sphere-viewer/equirectangular-video-adapter/index.module.js",
            ["videojs"] = "/lib/video-js/dist/video.min.js",
        },
        null,
        null
    );

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? PageRenderMode =>
        HttpContext.AcceptsInteractiveRouting() ? new InteractiveServerRenderMode(prerender: false) : null;
}
